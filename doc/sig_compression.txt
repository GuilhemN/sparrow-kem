# Note about the signature packing

2023-04-27  Markku-Juhani O. Saarinen <mjos@pqshield.com>

- Aiming at <10^-6 reject rate (due to "signature too long"), the signature length is computed from average and standard deviation as avg + 4*sigma, rounded to the next multiple of 2 bytes.

The longest signature encodings / 6000 were 
- Raccoon-128: 11519 (sig len 11490.3 +  4*8.26 = 11524, slack 5 bytes)
- Raccoon-192: 14538 (sig len 14502.9 + 4*10.19 = 14544, slack 6 bytes)
- Raccoon-256: 20328 (sig len 20280.8 + 4*12.18 = 20330, slack 2 bytes) 

=== Compression of signatures (c_hash, h, z) for the new parameter sets.

- c_hash is set to be 2*kappa/8 bytes for all parameter sets, just to simplify implementation.

- Across parameter sets, "h" distributions are a little bit different, but values are usually bound in range -2..+2. A representative average across variants:

    h  -3 0.000000
    h  -2 0.001343
    h  -1 0.158149
    h   0 0.679041
    h   1 0.159843
    h   2 0.001625
    h   3 0.000000

- Given the zero-dominant distribution (>67% of the probability mass), an optimal single-symbol Huffman code seems to be: abs(x) repeats of '1', unary terminating symbol symbol '0', and finally for x != 0 a sign symbol '0' for x>0 and '1' for x<0.

This will encode "h" into 1.649 bits per symbol on average.

    code    value
    0       0
    100     +1
    101     -1
    1100    +2
    1101    -2
    11100   +3
    11101   -3

- However, Zero h=0 does not seem so dominant that run-length encoding would give significant advantages over encoding it into a single bit.

- Distribution of "z" is roughly Gaussian with standard deviation sigma around 1.8e12 or 2^40.7 across all parameter sets. The infinity norm Boo {2^45.3, 2^45.4, 2^45.5} bounds it to 47 bits (including sign bit), but of course, values with >6 sigmas are exceedingly rare.

    Proposed encoding for z: store low 40 bits as-is, and high bits hi=floor(abs(x/2^40)) encoded as "hi" repeats of 1 followed by a stop bit 0 and sign (0=non-neg, 1=negative.)

    hi= 0 f= 0.452269 bits= 42  hi enc= 0
    hi= 1 f= 0.322308 bits= 43  hi enc= 10
    hi= 2 f= 0.160542 bits= 44  hi enc= 110
    hi= 3 f= 0.053874 bits= 45  hi enc= 1110
    hi= 4 f= 0.009570 bits= 46  ...
    hi= 5 f= 0.001329 bits= 47  
    hi= 6 f= 0.000080 bits= 48
    hi= 7 f= 0.000027 bits= 49

    This gives an average encoding of 42.8 bits per symbol in z.
